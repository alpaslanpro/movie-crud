definitions:
  router.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  router.LoginRequest:
    properties:
      password:
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  router.Movie:
    properties:
      actors:
        description: Define as an array of strings
        items:
          type: string
        type: array
      genres:
        description: Define as an array of strings
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  router.RegisterRequest:
    properties:
      password:
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - password
    - username
    type: object
  router.Response:
    properties:
      message:
        type: string
    type: object
info:
  contact: {}
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/router.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      summary: User Login
      tags:
      - Users
  /movies:
    get:
      consumes:
      - application/json
      description: Retrieve all movies with pagination and filtering
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of movies per page
        in: query
        name: page_size
        type: integer
      - description: Filter by title or genre
        in: query
        name: filter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/router.Movie'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all movies
      tags:
      - Movies
    post:
      consumes:
      - application/json
      description: Adds a new movie to the database
      parameters:
      - description: Movie object
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/router.Movie'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/router.Movie'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new movie
      tags:
      - Movies
  /movies/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a movie by its ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a movie
      tags:
      - Movies
    get:
      consumes:
      - application/json
      description: Retrieve a movie by its ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.Movie'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a movie by ID
      tags:
      - Movies
    put:
      consumes:
      - application/json
      description: Update movie details by ID
      parameters:
      - description: Movie ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated Movie object
        in: body
        name: movie
        required: true
        schema:
          $ref: '#/definitions/router.Movie'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.Movie'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a movie
      tags:
      - Movies
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/router.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/router.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/router.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/router.ErrorResponse'
      summary: User Registration
      tags:
      - Users
swagger: "2.0"
